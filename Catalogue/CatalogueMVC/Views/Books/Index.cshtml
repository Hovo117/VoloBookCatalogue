@model IEnumerable<BooksEntitiesDAL.Book>

@*@{
    ViewBag.Title = "Index";

    AjaxOptions options = new AjaxOptions
    {
        HttpMethod = "POST",
        UpdateTargetId = "searchResult",
        InsertionMode = InsertionMode.Replace,
        LoadingElementId = "divLoading"
    };
}

<h2></h2>

<p style="display:block">
    <ul class="nav navbar-nav">
        <li>@Html.ActionLink("Add Book", "Create")</li>
        <li>@Html.ActionLink("Add Author", "Create", "Authors")</li>
        <li>@Html.ActionLink("Add Country", "Create", "Countries")</li>
    </ul>
</p>
<div style="display:block">
    @using (Ajax.BeginForm("SearchBook", options))
    {
        @*<div>
                @Html.TextBox("keyword",null,htmlAttributes: new { @placeholder="Search by Title or Author", size = "40" })
                <button type="submit" style="display:none">Search</button>
            </div>
        <div class="col-sm-3 col-md-3" >
            <form class="navbar-form" role="search">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search by Title or Author" name="keyword" size="40">
                    <div class="input-group-btn">
                        <button class="btn btn-default" type="submit"><i class="glyphicon glyphicon-search"></i></button>
                    </div>
                </div>
            </form>
        </div>
        <div id="divLoading" style="width: 200px; display: none; position: absolute;">
            Loading ....
        </div>
    }
</div>

<div id="searchResult">
    @Html.Action("SearchBook", new { keyword = "" })
</div>*@

@{
    ViewBag.Title = "Index";
}
<h2></h2>

<div class="col-sm-3 col-md-3">
    <form class="navbar-form" role="search">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search by Title or Author" name="SearchString" id="SearchString" size="40">
            <div class="input-group-btn">
                <button class="btn btn-default" id="btnSearch" type="submit"><i class="glyphicon glyphicon-search"></i></button>
            </div>
        </div>
    </form>
</div>

@*<p>
    Find by name: <input id="SearchString" name="SearchString" type="text" value="" />
    <input type="button" value="Search" id="btnSearch" />
</p>*@
<div id="GridBooks">
    @Html.Partial("GridBooks", Model)
</div>
@section scripts
{
    <script type="text/javascript">
        // Adding popstate event listener to handle browser back button
        window.addEventListener("popstate", function (e) {
            $.ajax({
                url: location.href,
                success: function (result) {
                    $('#GridBooks').html(result);
                }
            });
        });

        function ChangeUrl(page, url) {
            if (typeof (history.pushState) != "undefined") {
                var obj = { Page: page, Url: url };
                history.pushState(null, obj.Page, obj.Url);
            } else {
                alert("Browser does not support HTML5.");
            }
        }

        function getUrlVars() {
            var vars = [], hash;
            var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
            for (var i = 0; i < hashes.length; i++) {
                hash = hashes[i].split('=');
                vars.push(hash[0]);
                vars[hash[0]] = hash[1];
            }
            return vars;
        }

        function search() {
            $.ajax({
                url: "/Books/Index?searchString=" + $('#SearchString').val(),
                success: function(result) {
                    ChangeUrl("index", "/Books/Index?searchString=" + $('#SearchString').val());
                    $('#ProductList').html(result);
                }
            });
        }

        $(function() {
            $("#btnSearch").click(function() {
                search();
            });

            $("#SearchString").keypress(function(e) {
                if (e.keyCode == 13) {
                    search();
                }
            });
            $('body').on('click', '#GridBooks .pagination a', function (event) {
                event.preventDefault();
                console.log('page');
                var searchString = $('#SearchString').val();
                if (searchString == undefined || searchString == '') {
                    searchString = '';
                } else {
                    searchString = '&searchString=' + searchString;
                }
                var url = $(this).attr('href') + searchString;
                console.log(url);
                $.ajax({
                    url: url,
                    success: function(result) {
                        ChangeUrl('index', url);
                        $('#GridBooks').html(result);
                    }
                });
            });


            $('body').on('click', '#GridBooks .table a', function (event) {

                event.preventDefault();

                var searchString = $('#SearchString').val();
                if (searchString == undefined || searchString == '') {
                    searchString = '';
                } else {
                    searchString = '&searchString=' + searchString;
                }

                var columnToSort = $(this).text();
                var currentSortOption = getUrlVars()['sortOption'];
                console.log(currentSortOption);
                var sort;
                switch (currentSortOption) {
                case "title_acs":
                    sort = 'sortOption=title_desc';
                    break;
                case "title_desc":
                    sort = 'sortOption=title_acs';
                    break;
                case "author_acs":
                    sort = 'sortOption=author_desc';
                    break;
                case "author_desc":
                    sort = 'sortOption=author_acs';
                    break;
                case "price_acs":
                    sort = 'sortOption=price_desc';
                    break;
                case "price_desc":
                    sort = 'sortOption=price_acs';
                    break;
                default:
                    sort = '';
                    break;
                }


                switch (columnToSort) {
                case 'Title':
                    if (currentSortOption != 'title_acs' && currentSortOption != 'title_desc') {
                        sort = 'sortOption=title_acs';
                    }
                    break;
                case 'Author':
                    if (currentSortOption != 'author_acs' && currentSortOption != 'author_desc') {
                        sort = 'sortOption=author_acs';
                    }
                    break;
                case 'Price':
                    if (currentSortOption != 'price_acs' && currentSortOption != 'price_decs') {
                        sort = 'sortOption=price_acs';
                    }
                    break;
                default:
                    sort = '';
                    break;

                }
                if (sort != '' & searchString != '') {
                    sort = '&' + sort;
                }
                var url = '/Books/Index?' + searchString + sort;
                $.ajax({
                    url: url,
                    success: function(result) {
                        ChangeUrl('index', url);
                        $('#GridBooks').html(result);
                    }
                });
            });

        });

    </script>

}